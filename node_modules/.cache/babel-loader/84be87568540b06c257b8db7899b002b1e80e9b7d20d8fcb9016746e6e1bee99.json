{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Portfolio\\\\src\\\\ui\\\\background-gradient-animation.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState, createContext } from \"react\";\nimport { cn } from \"../lib/utils\";\n\n// Context for background color sampling\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const BackgroundColorContext = /*#__PURE__*/createContext(undefined);\nexport const BackgroundGradientAnimation = ({\n  gradientBackgroundStart = \"rgb(108, 0, 162)\",\n  gradientBackgroundEnd = \"rgb(0, 17, 82)\",\n  firstColor = \"18, 113, 255\",\n  secondColor = \"221, 74, 255\",\n  thirdColor = \"100, 220, 255\",\n  fourthColor = \"200, 50, 50\",\n  fifthColor = \"180, 180, 50\",\n  pointerColor = \"140, 100, 255\",\n  size = \"80%\",\n  blendingValue = \"hard-light\",\n  children,\n  className,\n  interactive = true,\n  containerClassName\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const containerRectRef = useRef(null);\n  // Update rect on mount and resize\n  useEffect(() => {\n    function updateRect() {\n      if (containerRef.current) {\n        containerRectRef.current = containerRef.current.getBoundingClientRect();\n      }\n    }\n    updateRect();\n    window.addEventListener('resize', updateRect);\n    return () => window.removeEventListener('resize', updateRect);\n  }, []);\n  const [curX, setCurX] = useState(0);\n  const [curY, setCurY] = useState(0);\n  const [tgX, setTgX] = useState(0);\n  const [tgY, setTgY] = useState(0);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [dynamicPointerColor, setDynamicPointerColor] = useState(pointerColor);\n  const [targetPointerColor, setTargetPointerColor] = useState(pointerColor);\n  const animationFrameRef = useRef(null);\n\n  // Multiple animated blobs for the mouse gradient\n  const BLOB_RADIUS_MIN = 48; // px (was 32)\n  const BLOB_RADIUS_MAX = 112; // px (was 64)\n  const BLOB_COUNT = 8;\n  const [blobs, setBlobs] = useState(() => Array.from({\n    length: BLOB_COUNT\n  }, (_, i) => ({\n    id: i,\n    angle: Math.random() * Math.PI * 2,\n    radius: BLOB_RADIUS_MIN + Math.random() * (BLOB_RADIUS_MAX - BLOB_RADIUS_MIN),\n    targetAngle: Math.random() * Math.PI * 2,\n    targetRadius: BLOB_RADIUS_MIN + Math.random() * (BLOB_RADIUS_MAX - BLOB_RADIUS_MIN),\n    currentColor: pointerColor,\n    // Each blob's own color\n    color: pointerColor,\n    // For backward compatibility\n    size: 0.10,\n    // 10% for all blobs\n    speed: 0.01 + Math.random() * 0.01,\n    // Slower\n    colorLerp: 0.02 + Math.random() * 0.02 // Each blob gets a lerp factor between 0.02 and 0.04\n  })));\n\n  // Swarm center inertia state\n  const [swarm, setSwarm] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Use refs to always access latest blobs and swarm\n  const blobsRef = useRef(blobs);\n  const swarmRef = useRef(swarm);\n  useEffect(() => {\n    blobsRef.current = blobs;\n  }, [blobs]);\n  useEffect(() => {\n    swarmRef.current = swarm;\n  }, [swarm]);\n\n  // Function to calculate color distance (RGB Euclidean distance)\n  const colorDistance = (color1, color2) => {\n    const rgb1 = color1.split(',').map(c => parseInt(c.trim()));\n    const rgb2 = color2.split(',').map(c => parseInt(c.trim()));\n    return Math.sqrt(Math.pow(rgb1[0] - rgb2[0], 2) + Math.pow(rgb1[1] - rgb2[1], 2) + Math.pow(rgb1[2] - rgb2[2], 2));\n  };\n\n  // Function to blend colors based on RGB values\n  const blendColors = (color1, color2, weight) => {\n    const rgb1 = color1.split(',').map(c => parseInt(c.trim()));\n    const rgb2 = color2.split(',').map(c => parseInt(c.trim()));\n    const blended = rgb1.map((c1, i) => Math.round(c1 * (1 - weight) + rgb2[i] * weight));\n    return blended.join(', ');\n  };\n\n  // Function to get smooth contrasting color based on mouse position\n  const selectContrastingColor = (mouseX, mouseY) => {\n    const colors = isDarkMode ? [\"37, 99, 235\",\n    // first\n    \"126, 34, 206\",\n    // second\n    \"6, 182, 212\",\n    // third\n    \"190, 24, 93\",\n    // fourth\n    \"21, 128, 61\" // fifth\n    ] : [firstColor, secondColor, thirdColor, fourthColor, fifthColor];\n    const containerWidth = window.innerWidth;\n    const containerHeight = window.innerHeight;\n\n    // Normalize mouse position to 0-1 range\n    const normalizedX = mouseX / containerWidth;\n    const normalizedY = mouseY / containerHeight;\n\n    // Define gradient regions with their positions and colors\n    const regions = [{\n      x: 0.2,\n      y: 0.1,\n      color: colors[0]\n    },\n    // Top-left\n    {\n      x: 0.8,\n      y: 0.1,\n      color: colors[1]\n    },\n    // Top-right\n    {\n      x: 0.5,\n      y: 0.5,\n      color: colors[2]\n    },\n    // Center\n    {\n      x: 0.2,\n      y: 0.8,\n      color: colors[3]\n    },\n    // Bottom-left\n    {\n      x: 0.8,\n      y: 0.8,\n      color: colors[4]\n    } // Bottom-right\n    ];\n\n    // Find the closest region to determine the base contrasting color\n    let closestRegion = regions[0];\n    let minDistance = Infinity;\n    regions.forEach(region => {\n      const distance = Math.sqrt(Math.pow(normalizedX - region.x, 2) + Math.pow(normalizedY - region.y, 2));\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestRegion = region;\n      }\n    });\n\n    // Find the most contrasting color to the closest region\n    let mostContrastingColor = colors[0];\n    let maxContrast = 0;\n    colors.forEach(color => {\n      const contrast = colorDistance(closestRegion.color, color);\n      if (contrast > maxContrast) {\n        maxContrast = contrast;\n        mostContrastingColor = color;\n      }\n    });\n\n    // Calculate smooth transition based on distance from closest region\n    // Use a much larger influence radius for smoother, longer transitions\n    const influenceRadius = 8.0; // 800% of screen size (very large/global reach)\n    const distanceFromClosest = Math.sqrt(Math.pow(normalizedX - closestRegion.x, 2) + Math.pow(normalizedY - closestRegion.y, 2));\n\n    // Create smooth falloff - closer to region = stronger contrasting effect\n    const influenceStrength = Math.max(0, 1 - distanceFromClosest / influenceRadius);\n\n    // Use a softer curve for the transition\n    const smoothInfluence = Math.pow(influenceStrength, 1.1);\n\n    // Blend between neutral color and contrasting color based on influence\n    const neutralColor = isDarkMode ? \"37, 99, 235\" : firstColor;\n    return blendColors(neutralColor, mostContrastingColor, smoothInfluence * 0.7);\n  };\n\n  // For debug: store the last sampled coordinate\n  let lastSampledCoord = null;\n  // Function to get the background color at a given (x, y) coordinate (in px, relative to window)\n  // This is a simplified version: returns the closest region's color (could be improved for gradients)\n  const [debugSample, setDebugSample] = useState(null);\n  const getBackgroundColorAt = (x, y) => {\n    var _containerRef$current;\n    // For debug: store the last sampled coordinate\n    lastSampledCoord = {\n      x,\n      y\n    };\n    setDebugSample({\n      x,\n      y\n    });\n    const rect = (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.getBoundingClientRect();\n    if (!rect) return 'rgb(255,255,255)';\n    // Clamp x/y to container bounds (same as blob rendering)\n    let clampedX = x;\n    let clampedY = y;\n    if (clampedX < rect.left) clampedX = rect.left;\n    if (clampedX > rect.right) clampedX = rect.right;\n    if (clampedY < rect.top) clampedY = rect.top;\n    if (clampedY > rect.bottom) clampedY = rect.bottom;\n    const normalizedX = (clampedX - rect.left) / rect.width;\n    const normalizedY = (clampedY - rect.top) / rect.height;\n    // Linear gradient color (top to bottom)\n    const parseRGB = str => {\n      const match = str.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n      if (!match) return [255, 255, 255];\n      return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\n    };\n    const lerp = (a, b, t) => a + (b - a) * t;\n    const lerpColor = (c1, c2, t) => [Math.round(lerp(c1[0], c2[0], t)), Math.round(lerp(c1[1], c2[1], t)), Math.round(lerp(c1[2], c2[2], t))];\n    const gradStart = parseRGB(isDarkMode ? \"rgb(15, 23, 42)\" : gradientBackgroundStart);\n    const gradEnd = parseRGB(isDarkMode ? \"rgb(2, 6, 23)\" : gradientBackgroundEnd);\n    const gradColor = lerpColor(gradStart, gradEnd, normalizedY);\n    // Use animated background blobs from window.__backgroundBlobs if available\n    const animatedBlobs = window.__backgroundBlobs;\n    let totalWeight = 0;\n    let blended = [0, 0, 0];\n    const container = containerRef.current;\n    if (!container) return `rgb(${gradColor[0]},${gradColor[1]},${gradColor[2]})`;\n    const width = container.offsetWidth;\n    const height = container.offsetHeight;\n    const sampleX = normalizedX * width;\n    const sampleY = normalizedY * height;\n    // Debug: log animated blob positions and sample info\n    if (animatedBlobs && Array.isArray(animatedBlobs)) {\n      // eslint-disable-next-line no-console\n      console.log('[getBackgroundColorAt] sample', {\n        sampleX,\n        sampleY,\n        animatedBlobs: animatedBlobs.map(b => ({\n          x: b.x,\n          y: b.y,\n          radius: b.radius,\n          color: b.color\n        }))\n      });\n    }\n    if (animatedBlobs && Array.isArray(animatedBlobs) && animatedBlobs.length > 0) {\n      animatedBlobs.forEach(blob => {\n        const dist = Math.sqrt(Math.pow(sampleX - blob.x, 2) + Math.pow(sampleY - blob.y, 2));\n        if (dist < blob.radius) {\n          const weight = 1 - dist / blob.radius;\n          const blobColor = blob.color.startsWith('#') ? hexToRgb(blob.color) : blob.color.split(',').map(Number);\n          // eslint-disable-next-line no-console\n          console.log('[getBackgroundColorAt] blob', {\n            blob,\n            dist,\n            weight,\n            blobColor\n          });\n          blended[0] += blobColor[0] * weight;\n          blended[1] += blobColor[1] * weight;\n          blended[2] += blobColor[2] * weight;\n          totalWeight += weight;\n        }\n      });\n      if (totalWeight > 0) {\n        blended = blended.map(c => Math.round(c / totalWeight));\n        return `rgb(${blended[0]},${blended[1]},${blended[2]})`;\n      }\n    }\n    // Fallback to gradient color\n    return `rgb(${gradColor[0]},${gradColor[1]},${gradColor[2]})`;\n    // Helper to convert hex color to rgb array\n    function hexToRgb(hex) {\n      const h = hex.replace('#', '');\n      return [parseInt(h.substring(0, 2), 16), parseInt(h.substring(2, 4), 16), parseInt(h.substring(4, 6), 16)];\n    }\n  };\n\n  // Detect dark mode\n  useEffect(() => {\n    const checkDarkMode = () => {\n      setIsDarkMode(document.documentElement.classList.contains('dark'));\n    };\n    checkDarkMode();\n    const observer = new MutationObserver(checkDarkMode);\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n    return () => observer.disconnect();\n  }, []);\n\n  // Set colors based on theme\n  useEffect(() => {\n    const colors = isDarkMode ? {\n      bgStart: \"rgb(15, 23, 42)\",\n      bgEnd: \"rgb(2, 6, 23)\",\n      first: \"37, 99, 235\",\n      second: \"126, 34, 206\",\n      third: \"6, 182, 212\",\n      fourth: \"190, 24, 93\",\n      fifth: \"21, 128, 61\",\n      pointer: \"37, 99, 235\"\n    } : {\n      bgStart: gradientBackgroundStart,\n      bgEnd: gradientBackgroundEnd,\n      first: firstColor,\n      second: secondColor,\n      third: thirdColor,\n      fourth: fourthColor,\n      fifth: fifthColor,\n      pointer: pointerColor\n    };\n    document.body.style.setProperty(\"--gradient-background-start\", colors.bgStart);\n    document.body.style.setProperty(\"--gradient-background-end\", colors.bgEnd);\n    document.body.style.setProperty(\"--first-color\", colors.first);\n    document.body.style.setProperty(\"--second-color\", colors.second);\n    document.body.style.setProperty(\"--third-color\", colors.third);\n    document.body.style.setProperty(\"--fourth-color\", colors.fourth);\n    document.body.style.setProperty(\"--fifth-color\", colors.fifth);\n    document.body.style.setProperty(\"--pointer-color\", colors.pointer);\n    document.body.style.setProperty(\"--size\", size);\n    document.body.style.setProperty(\"--blending-value\", blendingValue);\n  }, [isDarkMode, gradientBackgroundStart, gradientBackgroundEnd, firstColor, secondColor, thirdColor, fourthColor, fifthColor, pointerColor, size, blendingValue]);\n\n  // Animation loop for smooth mouse tracking (fixes infinite loop)\n  useEffect(() => {\n    let running = true;\n    function animate() {\n      setCurX(prev => prev + (tgX - prev) / 20);\n      setCurY(prev => prev + (tgY - prev) / 20);\n      if (running) requestAnimationFrame(animate);\n    }\n    animate();\n    return () => {\n      running = false;\n    };\n  }, [tgX, tgY]);\n\n  // Helper: parse rgb string to array\n  const parseRGB = color => {\n    return color.split(',').map(c => parseInt(c.trim(), 10));\n  };\n  // Helper: rgb array to string\n  const rgbToString = rgb => `${rgb[0]}, ${rgb[1]}, ${rgb[2]}`;\n  // Helper: lerp between two rgb arrays\n  const lerpColors = (from, to, t) => {\n    return [Math.round(from[0] + (to[0] - from[0]) * t), Math.round(from[1] + (to[1] - from[1]) * t), Math.round(from[2] + (to[2] - from[2]) * t)];\n  };\n\n  // Animation loop for smooth color interpolation\n  useEffect(() => {\n    let running = true;\n    function animate() {\n      setDynamicPointerColor(prev => {\n        const from = parseRGB(prev);\n        const to = parseRGB(targetPointerColor);\n        if (from.every((v, i) => Math.abs(v - to[i]) < 2)) {\n          return rgbToString(to);\n        }\n        const lerped = lerpColors(from, to, 0.01); // Slower, smoother\n        return rgbToString(lerped);\n      });\n\n      // Swarm inertia parameters\n      setSwarm(prev => {\n        return {\n          x: tgX,\n          y: tgY\n        };\n      });\n\n      // Animate blob positions (no inertia, just orbit around swarm center)\n      setBlobs(prevBlobs => prevBlobs.map(blob => {\n        // Lerp angle and radius\n        let newAngle = blob.angle + (blob.targetAngle - blob.angle) * blob.speed;\n        let newRadius = blob.radius + (blob.targetRadius - blob.radius) * blob.speed;\n        // Lerp color toward its own color-aware target\n        // Calculate the blob's current screen position\n        const blobX = swarm.x + Math.cos(blob.angle) * blob.radius;\n        const blobY = swarm.y + Math.sin(blob.angle) * blob.radius;\n        // Use selectContrastingColor with the blob's position\n        const blobTargetColor = selectContrastingColor(blobX, blobY);\n        const from = parseRGB(blob.currentColor);\n        const to = parseRGB(blobTargetColor);\n        const lerpedColor = lerpColors(from, to, blob.colorLerp); // Each blob has its own color transition speed\n        // If close to target, pick new random target\n        if (Math.abs(newAngle - blob.targetAngle) < 0.05 && Math.abs(newRadius - blob.targetRadius) < 2) {\n          // Find the nearest actual background gradient blob position\n          const bgBlobs = [{\n            x: 0.05,\n            y: 0.05\n          },\n          // top-[5%] left-[5%]\n          {\n            x: 0.05,\n            y: 0.95\n          },\n          // top-[5%] right-[5%]\n          {\n            x: 0.95,\n            y: 0.05\n          },\n          // bottom-[5%] left-[5%]\n          {\n            x: 0.95,\n            y: 0.95\n          },\n          // bottom-[5%] right-[5%]\n          {\n            x: 0.5,\n            y: 0.5\n          },\n          // top-[50%] left-[50%]\n          {\n            x: 0.02,\n            y: 0.10\n          },\n          // top-[2%] left-[10%]\n          {\n            x: 0.01,\n            y: 0.85\n          },\n          // top-[1%] right-[15%]\n          {\n            x: 0.03,\n            y: 0.50\n          },\n          // top-[3%] left-[50%]\n          {\n            x: 0.00,\n            y: 0.30\n          },\n          // top-[0%] left-[30%]\n          {\n            x: 0.98,\n            y: 0.10\n          },\n          // bottom-[2%] left-[10%]\n          {\n            x: 0.99,\n            y: 0.85\n          },\n          // bottom-[1%] right-[15%]\n          {\n            x: 0.97,\n            y: 0.50\n          },\n          // bottom-[3%] left-[50%]\n          {\n            x: 1.00,\n            y: 0.30\n          },\n          // bottom-[0%] left-[30%]\n          {\n            x: 0.40,\n            y: 0.05\n          },\n          // top-[40%] left-[5%]\n          {\n            x: 0.35,\n            y: 0.95\n          } // top-[35%] right-[5%]\n          ];\n          const containerWidth = window.innerWidth;\n          const containerHeight = window.innerHeight;\n          const swarmNormX = swarm.x / containerWidth;\n          const swarmNormY = swarm.y / containerHeight;\n          let nearestBlob = bgBlobs[0];\n          let minDist = Infinity;\n          for (const blobPos of bgBlobs) {\n            const dist = Math.hypot(blobPos.x - swarmNormX, blobPos.y - swarmNormY);\n            if (dist < minDist) {\n              minDist = dist;\n              nearestBlob = blobPos;\n            }\n          }\n          // Angle from swarm center to nearest background blob\n          const dx = nearestBlob.x * containerWidth - swarm.x;\n          const dy = nearestBlob.y * containerHeight - swarm.y;\n          const blobAngle = Math.atan2(dy, dx);\n          // Pick a random angle, then bias it toward blobAngle\n          let randomAngle = Math.random() * Math.PI * 2;\n          // Bias strength depends on distance: closer = stronger bias, farther = weaker bias\n          // Use a smoothstep curve for bias: bias = max(0.15, min(0.5, 0.5 - minDist * 0.4))\n          // (so bias is 0.5 when on top of blob, 0.15 when far away)\n          let bias = 0.5 - Math.min(minDist, 1) * 0.4;\n          bias = Math.max(0.15, Math.min(0.5, bias));\n          let biasedAngle = randomAngle * (1 - bias) + blobAngle * bias;\n          // Normalize angle to [0, 2PI]\n          if (biasedAngle < 0) biasedAngle += Math.PI * 2;\n          if (biasedAngle > Math.PI * 2) biasedAngle -= Math.PI * 2;\n          newAngle = blob.angle;\n          newRadius = blob.radius;\n          // Allow the radius to exceed the max by up to 40% when bias is strong\n          newRadius = BLOB_RADIUS_MIN + Math.random() * (BLOB_RADIUS_MAX - BLOB_RADIUS_MIN) + BLOB_RADIUS_MAX * 0.4 * (bias - 0.15) / (0.5 - 0.15);\n          return {\n            ...blob,\n            targetAngle: biasedAngle,\n            targetRadius: newRadius,\n            angle: newAngle,\n            radius: newRadius,\n            currentColor: rgbToString(lerpedColor),\n            color: rgbToString(lerpedColor)\n          };\n        }\n        return {\n          ...blob,\n          angle: newAngle,\n          radius: newRadius,\n          currentColor: rgbToString(lerpedColor),\n          color: rgbToString(lerpedColor)\n        };\n      }));\n      if (running) {\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    }\n    animationFrameRef.current = requestAnimationFrame(animate);\n    return () => {\n      running = false;\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, [targetPointerColor, tgX, tgY]);\n\n  // Global mousemove handler for robust tracking\n  useEffect(() => {\n    function handleMouseMove(event) {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      const relativeX = event.clientX - rect.left;\n      const relativeY = event.clientY - rect.top;\n      setTgX(relativeX);\n      setTgY(relativeY);\n      // Update debug sample color on mouse move\n      setDebugSample({\n        x: event.clientX,\n        y: event.clientY\n      });\n      // Update target color only\n      const contrastingColor = selectContrastingColor(relativeX, relativeY);\n      setTargetPointerColor(contrastingColor);\n    }\n    if (interactive) {\n      window.addEventListener('mousemove', handleMouseMove);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [interactive]);\n\n  // Register global background color sampling function\n  useEffect(() => {\n    window.__getBackgroundColorAt = getBackgroundColorAt;\n    return () => {\n      if (window.__getBackgroundColorAt === getBackgroundColorAt) {\n        delete window.__getBackgroundColorAt;\n      }\n    };\n  });\n\n  // Expose animated blob positions, sizes, and colors globally for color sampling (for debug tools)\n  useEffect(() => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      window.__backgroundBlobs = blobs.map(blob => {\n        var _blob$angle, _blob$radius, _blob$size, _ref, _blob$currentColor;\n        // Calculate blob center in window coordinates\n        const angle = (_blob$angle = blob.angle) !== null && _blob$angle !== void 0 ? _blob$angle : 0;\n        const radius = (_blob$radius = blob.radius) !== null && _blob$radius !== void 0 ? _blob$radius : 0;\n        const centerX = swarm.x + Math.cos(angle) * radius + rect.left;\n        const centerY = swarm.y + Math.sin(angle) * radius + rect.top;\n        // Use currentColor or color as RGB string\n        return {\n          x: centerX,\n          y: centerY,\n          radius: ((_blob$size = blob.size) !== null && _blob$size !== void 0 ? _blob$size : 0.10) * rect.width * 0.5,\n          // size is fraction of container width, match visual size\n          color: (_ref = (_blob$currentColor = blob.currentColor) !== null && _blob$currentColor !== void 0 ? _blob$currentColor : blob.color) !== null && _ref !== void 0 ? _ref : '140, 100, 255'\n        };\n      });\n    }\n  }, [blobs, swarm, containerRef]);\n\n  // Remove animation frame update for debug sample; rely on mousemove to update debug dot\n\n  const [isSafari, setIsSafari] = useState(false);\n  useEffect(() => {\n    setIsSafari(/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\n  }, []);\n\n  // Set to false to disable mouse-following blobs\n  const ENABLE_POINTER_BLOBS = false;\n\n  // Helper: normalize a point to [0,1] within the container\n  function normalizeToContainer(x, y) {\n    var _containerRef$current2;\n    const rect = (_containerRef$current2 = containerRef.current) === null || _containerRef$current2 === void 0 ? void 0 : _containerRef$current2.getBoundingClientRect();\n    if (!rect) return {\n      normalizedX: 0,\n      normalizedY: 0\n    };\n    let clampedX = x;\n    let clampedY = y;\n    if (clampedX < rect.left) clampedX = rect.left;\n    if (clampedX > rect.right) clampedX = rect.right;\n    if (clampedY < rect.top) clampedY = rect.top;\n    if (clampedY > rect.bottom) clampedY = rect.bottom;\n    return {\n      normalizedX: (clampedX - rect.left) / rect.width,\n      normalizedY: (clampedY - rect.top) / rect.height\n    };\n  }\n\n  // Helper: convert window (client) coordinates to normalized [0,1] in container\n  function windowToNormalized(x, y) {\n    var _containerRef$current3;\n    const rect = (_containerRef$current3 = containerRef.current) === null || _containerRef$current3 === void 0 ? void 0 : _containerRef$current3.getBoundingClientRect();\n    if (!rect) return {\n      normalizedX: 0,\n      normalizedY: 0\n    };\n    return {\n      normalizedX: (x - rect.left) / rect.width,\n      normalizedY: (y - rect.top) / rect.height\n    };\n  }\n\n  // Helper: convert normalized [0,1] in container to window (client) coordinates\n  function normalizedToWindow(normalizedX, normalizedY) {\n    var _containerRef$current4;\n    const rect = (_containerRef$current4 = containerRef.current) === null || _containerRef$current4 === void 0 ? void 0 : _containerRef$current4.getBoundingClientRect();\n    if (!rect) return {\n      x: 0,\n      y: 0\n    };\n    return {\n      x: rect.left + normalizedX * rect.width,\n      y: rect.top + normalizedY * rect.height\n    };\n  }\n\n  // Render a red dot at the last sampled coordinate (for debug)\n  const renderDebugSampleDot = () => {\n    if (!debugSample || !containerRef.current) return null;\n    const rect = containerRef.current.getBoundingClientRect();\n    const {\n      normalizedX: debugNormX,\n      normalizedY: debugNormY\n    } = windowToNormalized(debugSample.x, debugSample.y);\n    // Map normalized back to container pixel space\n    const {\n      x: dotX,\n      y: dotY\n    } = normalizedToWindow(debugNormX, debugNormY);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        left: dotX - 6,\n        top: dotY - 6,\n        width: 12,\n        height: 12,\n        borderRadius: 6,\n        background: \"red\",\n        zIndex: 99999,\n        pointerEvents: \"none\",\n        boxShadow: \"0 0 8px 2px rgba(255,0,0,0.5)\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(BackgroundColorContext.Provider, {\n    value: {\n      getBackgroundColorAt\n    },\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: containerRef,\n        className: cn(\"h-full w-full relative overflow-hidden top-0 left-0 bg-[linear-gradient(40deg,var(--gradient-background-start),var(--gradient-background-end))] pointer-events-none\", containerClassName),\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"hidden\",\n          children: /*#__PURE__*/_jsxDEV(\"defs\", {\n            children: /*#__PURE__*/_jsxDEV(\"filter\", {\n              id: \"blurMe\",\n              children: [/*#__PURE__*/_jsxDEV(\"feGaussianBlur\", {\n                in: \"SourceGraphic\",\n                stdDeviation: \"10\",\n                result: \"blur\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 610,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"feColorMatrix\", {\n                in: \"blur\",\n                mode: \"matrix\",\n                values: \"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8\",\n                result: \"goo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 611,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"feBlend\", {\n                in: \"SourceGraphic\",\n                in2: \"goo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 617,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: cn(\"gradients-container h-full w-full blur-lg\", isSafari ? \"blur-2xl\" : \"[filter:url(#blurMe)_blur(40px)]\"),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_var(--first-color)_0,_var(--first-color)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[5%] left-[5%] [transform-origin:top_left] animate-first opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--second-color),_0.8)_0,_rgba(var(--second-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[5%] right-[5%] [transform-origin:top_right] animate-second opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[5%] left-[5%] [transform-origin:bottom_left] animate-third opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[5%] right-[5%] [transform-origin:bottom_right] animate-fourth opacity-70\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.8)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[50%] left-[50%] [transform-origin:center_center] animate-fifth opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--first-color),_0.8)_0,_rgba(var(--first-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[2%] left-[10%] [transform-origin:top_left] animate-first opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--second-color),_0.8)_0,_rgba(var(--second-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[1%] right-[15%] [transform-origin:top_right] animate-second opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[3%] left-[50%] [transform-origin:top_center] animate-third opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[0%] left-[30%] [transform-origin:top_left] animate-fourth opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[2%] left-[10%] [transform-origin:bottom_left] animate-third opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 676,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[1%] right-[15%] [transform-origin:bottom_right] animate-fourth opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.8)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[3%] left-[50%] [transform-origin:bottom_center] animate-fifth opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--first-color),_0.8)_0,_rgba(var(--first-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[0%] left-[30%] [transform-origin:bottom_left] animate-first opacity-100\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.5)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[40%] left-[5%] [transform-origin:left_center] animate-fifth opacity-70\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cn(\"absolute [background:radial-gradient(circle_at_center,_rgba(var(--first-color),_0.5)_0,_rgba(var(--first-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[35%] right-[5%] [transform-origin:right_center] animate-first opacity-70\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 13\n          }, this), ENABLE_POINTER_BLOBS && interactive && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: blobs.map(blob => {\n              // Calculate offset from swarm center using polar coordinates\n              const offsetX = Math.cos(blob.angle) * blob.radius;\n              const offsetY = Math.sin(blob.angle) * blob.radius;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  background: `radial-gradient(circle at center, rgba(${blob.currentColor}, 0.6) 0%, rgba(${blob.currentColor}, 0.4) 30%, rgba(${blob.currentColor}, 0) 100%)`,\n                  mixBlendMode: 'normal',\n                  position: 'absolute',\n                  width: `${blob.size * 100}%`,\n                  height: `${blob.size * 100}%`,\n                  top: `calc(${swarm.y + offsetY}px - ${blob.size * 50}%)`,\n                  left: `calc(${swarm.x + offsetX}px - ${blob.size * 50}%)`,\n                  opacity: 0.8,\n                  pointerEvents: 'none',\n                  transition: 'none',\n                  filter: 'blur(48px)'\n                }\n              }, blob.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this), renderDebugSampleDot()]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 598,\n    columnNumber: 5\n  }, this);\n};\n_s(BackgroundGradientAnimation, \"4w/SS/yKV/+SJGYB8Cd7EsC98+M=\");\n_c = BackgroundGradientAnimation;\nvar _c;\n$RefreshReg$(_c, \"BackgroundGradientAnimation\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useEffect","useRef","useState","createContext","cn","jsxDEV","_jsxDEV","Fragment","_Fragment","BackgroundColorContext","undefined","BackgroundGradientAnimation","gradientBackgroundStart","gradientBackgroundEnd","firstColor","secondColor","thirdColor","fourthColor","fifthColor","pointerColor","size","blendingValue","children","className","interactive","containerClassName","containerRef","containerRectRef","updateRect","current","getBoundingClientRect","window","addEventListener","removeEventListener","curX","setCurX","curY","setCurY","tgX","setTgX","tgY","setTgY","isDarkMode","setIsDarkMode","dynamicPointerColor","setDynamicPointerColor","targetPointerColor","setTargetPointerColor","animationFrameRef","BLOB_RADIUS_MIN","BLOB_RADIUS_MAX","BLOB_COUNT","blobs","setBlobs","Array","from","length","_","i","id","angle","Math","random","PI","radius","targetAngle","targetRadius","currentColor","color","speed","colorLerp","swarm","setSwarm","x","y","blobsRef","swarmRef","colorDistance","color1","color2","rgb1","split","map","c","parseInt","trim","rgb2","sqrt","pow","blendColors","weight","blended","c1","round","join","selectContrastingColor","mouseX","mouseY","colors","containerWidth","innerWidth","containerHeight","innerHeight","normalizedX","normalizedY","regions","closestRegion","minDistance","Infinity","forEach","region","distance","mostContrastingColor","maxContrast","contrast","influenceRadius","distanceFromClosest","influenceStrength","max","smoothInfluence","neutralColor","lastSampledCoord","debugSample","setDebugSample","getBackgroundColorAt","_containerRef$current","rect","clampedX","clampedY","left","right","top","bottom","width","height","parseRGB","str","match","lerp","a","b","t","lerpColor","c2","gradStart","gradEnd","gradColor","animatedBlobs","__backgroundBlobs","totalWeight","container","offsetWidth","offsetHeight","sampleX","sampleY","isArray","console","log","blob","dist","blobColor","startsWith","hexToRgb","Number","hex","h","replace","substring","checkDarkMode","document","documentElement","classList","contains","observer","MutationObserver","observe","attributes","attributeFilter","disconnect","bgStart","bgEnd","first","second","third","fourth","fifth","pointer","body","style","setProperty","running","animate","prev","requestAnimationFrame","rgbToString","rgb","lerpColors","to","every","v","abs","lerped","prevBlobs","newAngle","newRadius","blobX","cos","blobY","sin","blobTargetColor","lerpedColor","bgBlobs","swarmNormX","swarmNormY","nearestBlob","minDist","blobPos","hypot","dx","dy","blobAngle","atan2","randomAngle","bias","min","biasedAngle","cancelAnimationFrame","handleMouseMove","event","relativeX","clientX","relativeY","clientY","contrastingColor","__getBackgroundColorAt","_blob$angle","_blob$radius","_blob$size","_ref","_blob$currentColor","centerX","centerY","isSafari","setIsSafari","test","navigator","userAgent","ENABLE_POINTER_BLOBS","normalizeToContainer","_containerRef$current2","windowToNormalized","_containerRef$current3","normalizedToWindow","_containerRef$current4","renderDebugSampleDot","debugNormX","debugNormY","dotX","dotY","position","borderRadius","background","zIndex","pointerEvents","boxShadow","fileName","lineNumber","columnNumber","Provider","value","ref","in","stdDeviation","result","mode","values","in2","offsetX","offsetY","mixBlendMode","opacity","transition","filter","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Portfolio/src/ui/background-gradient-animation.tsx"],"sourcesContent":["\"use client\";\nimport { useEffect, useRef, useState, createContext } from \"react\";\nimport { cn } from \"../lib/utils\";\n\n// Context for background color sampling\nexport const BackgroundColorContext = createContext<{ getBackgroundColorAt: (x: number, y: number) => string } | undefined>(undefined);\n\nexport const BackgroundGradientAnimation = ({\n  gradientBackgroundStart = \"rgb(108, 0, 162)\",\n  gradientBackgroundEnd = \"rgb(0, 17, 82)\",\n  firstColor = \"18, 113, 255\",\n  secondColor = \"221, 74, 255\",\n  thirdColor = \"100, 220, 255\",\n  fourthColor = \"200, 50, 50\",\n  fifthColor = \"180, 180, 50\",\n  pointerColor = \"140, 100, 255\",\n  size = \"80%\",\n  blendingValue = \"hard-light\",\n  children,\n  className,\n  interactive = true,\n  containerClassName,\n}: {\n  gradientBackgroundStart?: string;\n  gradientBackgroundEnd?: string;\n  firstColor?: string;\n  secondColor?: string;\n  thirdColor?: string;\n  fourthColor?: string;\n  fifthColor?: string;\n  pointerColor?: string;\n  size?: string;\n  blendingValue?: string;\n  children?: React.ReactNode;\n  className?: string;\n  interactive?: boolean;\n  containerClassName?: string;\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const containerRectRef = useRef<DOMRect | null>(null);\n  // Update rect on mount and resize\n  useEffect(() => {\n    function updateRect() {\n      if (containerRef.current) {\n        containerRectRef.current = containerRef.current.getBoundingClientRect();\n      }\n    }\n    updateRect();\n    window.addEventListener('resize', updateRect);\n    return () => window.removeEventListener('resize', updateRect);\n  }, []);\n  const [curX, setCurX] = useState(0);\n  const [curY, setCurY] = useState(0);\n  const [tgX, setTgX] = useState(0);\n  const [tgY, setTgY] = useState(0);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [dynamicPointerColor, setDynamicPointerColor] = useState(pointerColor);\n  const [targetPointerColor, setTargetPointerColor] = useState(pointerColor);\n  const animationFrameRef = useRef<number | null>(null);\n\n  // Multiple animated blobs for the mouse gradient\n  const BLOB_RADIUS_MIN = 48; // px (was 32)\n  const BLOB_RADIUS_MAX = 112; // px (was 64)\n  const BLOB_COUNT = 8;\n  const [blobs, setBlobs] = useState(() => \n    Array.from({ length: BLOB_COUNT }, (_, i) => ({\n      id: i,\n      angle: Math.random() * Math.PI * 2,\n      radius: BLOB_RADIUS_MIN + Math.random() * (BLOB_RADIUS_MAX - BLOB_RADIUS_MIN),\n      targetAngle: Math.random() * Math.PI * 2,\n      targetRadius: BLOB_RADIUS_MIN + Math.random() * (BLOB_RADIUS_MAX - BLOB_RADIUS_MIN),\n      currentColor: pointerColor, // Each blob's own color\n      color: pointerColor, // For backward compatibility\n      size: 0.10, // 10% for all blobs\n      speed: 0.01 + Math.random() * 0.01, // Slower\n      colorLerp: 0.02 + Math.random() * 0.02, // Each blob gets a lerp factor between 0.02 and 0.04\n    }))\n  );\n\n  // Swarm center inertia state\n  const [swarm, setSwarm] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  // Use refs to always access latest blobs and swarm\n  const blobsRef = useRef(blobs);\n  const swarmRef = useRef(swarm);\n  useEffect(() => { blobsRef.current = blobs; }, [blobs]);\n  useEffect(() => { swarmRef.current = swarm; }, [swarm]);\n\n  // Function to calculate color distance (RGB Euclidean distance)\n  const colorDistance = (color1: string, color2: string): number => {\n    const rgb1 = color1.split(',').map(c => parseInt(c.trim()));\n    const rgb2 = color2.split(',').map(c => parseInt(c.trim()));\n    return Math.sqrt(\n      Math.pow(rgb1[0] - rgb2[0], 2) + \n      Math.pow(rgb1[1] - rgb2[1], 2) + \n      Math.pow(rgb1[2] - rgb2[2], 2)\n    );\n  };\n\n  // Function to blend colors based on RGB values\n  const blendColors = (color1: string, color2: string, weight: number): string => {\n    const rgb1 = color1.split(',').map(c => parseInt(c.trim()));\n    const rgb2 = color2.split(',').map(c => parseInt(c.trim()));\n    \n    const blended = rgb1.map((c1, i) => \n      Math.round(c1 * (1 - weight) + rgb2[i] * weight)\n    );\n    \n    return blended.join(', ');\n  };\n\n  // Function to get smooth contrasting color based on mouse position\n  const selectContrastingColor = (mouseX: number, mouseY: number) => {\n    const colors = isDarkMode ? [\n      \"37, 99, 235\",   // first\n      \"126, 34, 206\",  // second\n      \"6, 182, 212\",   // third\n      \"190, 24, 93\",   // fourth\n      \"21, 128, 61\"    // fifth\n    ] : [\n      firstColor,\n      secondColor,\n      thirdColor,\n      fourthColor,\n      fifthColor\n    ];\n\n    const containerWidth = window.innerWidth;\n    const containerHeight = window.innerHeight;\n    \n    // Normalize mouse position to 0-1 range\n    const normalizedX = mouseX / containerWidth;\n    const normalizedY = mouseY / containerHeight;\n    \n    // Define gradient regions with their positions and colors\n    const regions = [\n      { x: 0.2, y: 0.1, color: colors[0] },      // Top-left\n      { x: 0.8, y: 0.1, color: colors[1] },      // Top-right\n      { x: 0.5, y: 0.5, color: colors[2] },      // Center\n      { x: 0.2, y: 0.8, color: colors[3] },      // Bottom-left\n      { x: 0.8, y: 0.8, color: colors[4] },      // Bottom-right\n    ];\n\n    // Find the closest region to determine the base contrasting color\n    let closestRegion = regions[0];\n    let minDistance = Infinity;\n    \n    regions.forEach(region => {\n      const distance = Math.sqrt(\n        Math.pow(normalizedX - region.x, 2) + \n        Math.pow(normalizedY - region.y, 2)\n      );\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestRegion = region;\n      }\n    });\n\n    // Find the most contrasting color to the closest region\n    let mostContrastingColor = colors[0];\n    let maxContrast = 0;\n\n    colors.forEach(color => {\n      const contrast = colorDistance(closestRegion.color, color);\n      if (contrast > maxContrast) {\n        maxContrast = contrast;\n        mostContrastingColor = color;\n      }\n    });\n\n    // Calculate smooth transition based on distance from closest region\n    // Use a much larger influence radius for smoother, longer transitions\n    const influenceRadius = 8.0; // 800% of screen size (very large/global reach)\n    const distanceFromClosest = Math.sqrt(\n      Math.pow(normalizedX - closestRegion.x, 2) + \n      Math.pow(normalizedY - closestRegion.y, 2)\n    );\n    \n    // Create smooth falloff - closer to region = stronger contrasting effect\n    const influenceStrength = Math.max(0, 1 - (distanceFromClosest / influenceRadius));\n    \n    // Use a softer curve for the transition\n    const smoothInfluence = Math.pow(influenceStrength, 1.1);\n    \n    // Blend between neutral color and contrasting color based on influence\n    const neutralColor = isDarkMode ? \"37, 99, 235\" : firstColor;\n    return blendColors(neutralColor, mostContrastingColor, smoothInfluence * 0.7);\n  };\n\n  // For debug: store the last sampled coordinate\n  let lastSampledCoord: { x: number; y: number } | null = null;\n  // Function to get the background color at a given (x, y) coordinate (in px, relative to window)\n  // This is a simplified version: returns the closest region's color (could be improved for gradients)\n  const [debugSample, setDebugSample] = useState<{ x: number; y: number } | null>(null);\n  const getBackgroundColorAt = (x: number, y: number) => {\n    // For debug: store the last sampled coordinate\n    lastSampledCoord = { x, y };\n    setDebugSample({ x, y });\n    const rect = containerRef.current?.getBoundingClientRect();\n    if (!rect) return 'rgb(255,255,255)';\n    // Clamp x/y to container bounds (same as blob rendering)\n    let clampedX = x;\n    let clampedY = y;\n    if (clampedX < rect.left) clampedX = rect.left;\n    if (clampedX > rect.right) clampedX = rect.right;\n    if (clampedY < rect.top) clampedY = rect.top;\n    if (clampedY > rect.bottom) clampedY = rect.bottom;\n    const normalizedX = (clampedX - rect.left) / rect.width;\n    const normalizedY = (clampedY - rect.top) / rect.height;\n    // Linear gradient color (top to bottom)\n    const parseRGB = (str: string): [number, number, number] => {\n      const match = str.match(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/);\n      if (!match) return [255,255,255];\n      return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\n    };\n    const lerp = (a: number, b: number, t: number): number => a + (b - a) * t;\n    const lerpColor = (c1: [number, number, number], c2: [number, number, number], t: number): [number, number, number] => [\n      Math.round(lerp(c1[0], c2[0], t)),\n      Math.round(lerp(c1[1], c2[1], t)),\n      Math.round(lerp(c1[2], c2[2], t)),\n    ];\n    const gradStart = parseRGB(isDarkMode ? \"rgb(15, 23, 42)\" : gradientBackgroundStart);\n    const gradEnd = parseRGB(isDarkMode ? \"rgb(2, 6, 23)\" : gradientBackgroundEnd);\n    const gradColor = lerpColor(gradStart, gradEnd, normalizedY);\n    // Use animated background blobs from window.__backgroundBlobs if available\n    const animatedBlobs = (window as any).__backgroundBlobs as Array<{ x: number; y: number; radius: number; color: string }>;\n    let totalWeight = 0;\n    let blended = [0, 0, 0];\n    const container = containerRef.current;\n    if (!container) return `rgb(${gradColor[0]},${gradColor[1]},${gradColor[2]})`;\n    const width = container.offsetWidth;\n    const height = container.offsetHeight;\n    const sampleX = normalizedX * width;\n    const sampleY = normalizedY * height;\n    // Debug: log animated blob positions and sample info\n    if (animatedBlobs && Array.isArray(animatedBlobs)) {\n      // eslint-disable-next-line no-console\n      console.log('[getBackgroundColorAt] sample', {\n        sampleX, sampleY, animatedBlobs: animatedBlobs.map(b => ({ x: b.x, y: b.y, radius: b.radius, color: b.color }))\n      });\n    }\n    if (animatedBlobs && Array.isArray(animatedBlobs) && animatedBlobs.length > 0) {\n      animatedBlobs.forEach(blob => {\n        const dist = Math.sqrt(Math.pow(sampleX - blob.x, 2) + Math.pow(sampleY - blob.y, 2));\n        if (dist < blob.radius) {\n          const weight = 1 - dist / blob.radius;\n          const blobColor = blob.color.startsWith('#')\n            ? hexToRgb(blob.color)\n            : blob.color.split(',').map(Number) as [number, number, number];\n          // eslint-disable-next-line no-console\n          console.log('[getBackgroundColorAt] blob', { blob, dist, weight, blobColor });\n          blended[0] += blobColor[0] * weight;\n          blended[1] += blobColor[1] * weight;\n          blended[2] += blobColor[2] * weight;\n          totalWeight += weight;\n        }\n      });\n      if (totalWeight > 0) {\n        blended = blended.map(c => Math.round(c / totalWeight)) as [number, number, number];\n        return `rgb(${blended[0]},${blended[1]},${blended[2]})`;\n      }\n    }\n    // Fallback to gradient color\n    return `rgb(${gradColor[0]},${gradColor[1]},${gradColor[2]})`;\n    // Helper to convert hex color to rgb array\n    function hexToRgb(hex: string): [number, number, number] {\n      const h = hex.replace('#', '');\n      return [\n        parseInt(h.substring(0, 2), 16),\n        parseInt(h.substring(2, 4), 16),\n        parseInt(h.substring(4, 6), 16),\n      ];\n    }\n  };\n\n  // Detect dark mode\n  useEffect(() => {\n    const checkDarkMode = () => {\n      setIsDarkMode(document.documentElement.classList.contains('dark'));\n    };\n    \n    checkDarkMode();\n    const observer = new MutationObserver(checkDarkMode);\n    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });\n    \n    return () => observer.disconnect();\n  }, []);\n\n  // Set colors based on theme\n  useEffect(() => {\n    const colors = isDarkMode ? {\n      bgStart: \"rgb(15, 23, 42)\",\n      bgEnd: \"rgb(2, 6, 23)\",\n      first: \"37, 99, 235\",\n      second: \"126, 34, 206\",\n      third: \"6, 182, 212\",\n      fourth: \"190, 24, 93\",\n      fifth: \"21, 128, 61\",\n      pointer: \"37, 99, 235\"\n    } : {\n      bgStart: gradientBackgroundStart,\n      bgEnd: gradientBackgroundEnd,\n      first: firstColor,\n      second: secondColor,\n      third: thirdColor,\n      fourth: fourthColor,\n      fifth: fifthColor,\n      pointer: pointerColor\n    };\n\n    document.body.style.setProperty(\"--gradient-background-start\", colors.bgStart);\n    document.body.style.setProperty(\"--gradient-background-end\", colors.bgEnd);\n    document.body.style.setProperty(\"--first-color\", colors.first);\n    document.body.style.setProperty(\"--second-color\", colors.second);\n    document.body.style.setProperty(\"--third-color\", colors.third);\n    document.body.style.setProperty(\"--fourth-color\", colors.fourth);\n    document.body.style.setProperty(\"--fifth-color\", colors.fifth);\n    document.body.style.setProperty(\"--pointer-color\", colors.pointer);\n    document.body.style.setProperty(\"--size\", size);\n    document.body.style.setProperty(\"--blending-value\", blendingValue);\n  }, [isDarkMode, gradientBackgroundStart, gradientBackgroundEnd, firstColor, secondColor, thirdColor, fourthColor, fifthColor, pointerColor, size, blendingValue]);\n\n  // Animation loop for smooth mouse tracking (fixes infinite loop)\n  useEffect(() => {\n    let running = true;\n    function animate() {\n      setCurX(prev => prev + (tgX - prev) / 20);\n      setCurY(prev => prev + (tgY - prev) / 20);\n      if (running) requestAnimationFrame(animate);\n    }\n    animate();\n    return () => { running = false; };\n  }, [tgX, tgY]);\n\n  // Helper: parse rgb string to array\n  const parseRGB = (color: string): [number, number, number] => {\n    return color.split(',').map(c => parseInt(c.trim(), 10)) as [number, number, number];\n  };\n  // Helper: rgb array to string\n  const rgbToString = (rgb: [number, number, number]) => `${rgb[0]}, ${rgb[1]}, ${rgb[2]}`;\n  // Helper: lerp between two rgb arrays\n  const lerpColors = (from: [number, number, number], to: [number, number, number], t: number): [number, number, number] => {\n    return [\n      Math.round(from[0] + (to[0] - from[0]) * t),\n      Math.round(from[1] + (to[1] - from[1]) * t),\n      Math.round(from[2] + (to[2] - from[2]) * t),\n    ];\n  };\n\n  // Animation loop for smooth color interpolation\n  useEffect(() => {\n    let running = true;\n    function animate() {\n      setDynamicPointerColor(prev => {\n        const from = parseRGB(prev);\n        const to = parseRGB(targetPointerColor);\n        if (from.every((v, i) => Math.abs(v - to[i]) < 2)) {\n          return rgbToString(to);\n        }\n        const lerped = lerpColors(from, to, 0.01); // Slower, smoother\n        return rgbToString(lerped);\n      });\n\n      // Swarm inertia parameters\n      setSwarm(prev => {\n        return { x: tgX, y: tgY };\n      });\n\n      // Animate blob positions (no inertia, just orbit around swarm center)\n      setBlobs(prevBlobs =>\n        prevBlobs.map(blob => {\n          // Lerp angle and radius\n          let newAngle = blob.angle + (blob.targetAngle - blob.angle) * blob.speed;\n          let newRadius = blob.radius + (blob.targetRadius - blob.radius) * blob.speed;\n          // Lerp color toward its own color-aware target\n          // Calculate the blob's current screen position\n          const blobX = swarm.x + Math.cos(blob.angle) * blob.radius;\n          const blobY = swarm.y + Math.sin(blob.angle) * blob.radius;\n          // Use selectContrastingColor with the blob's position\n          const blobTargetColor = selectContrastingColor(blobX, blobY);\n          const from = parseRGB(blob.currentColor);\n          const to = parseRGB(blobTargetColor);\n          const lerpedColor = lerpColors(from, to, blob.colorLerp); // Each blob has its own color transition speed\n          // If close to target, pick new random target\n          if (Math.abs(newAngle - blob.targetAngle) < 0.05 && Math.abs(newRadius - blob.targetRadius) < 2) {\n            // Find the nearest actual background gradient blob position\n            const bgBlobs = [\n              { x: 0.05, y: 0.05 }, // top-[5%] left-[5%]\n              { x: 0.05, y: 0.95 }, // top-[5%] right-[5%]\n              { x: 0.95, y: 0.05 }, // bottom-[5%] left-[5%]\n              { x: 0.95, y: 0.95 }, // bottom-[5%] right-[5%]\n              { x: 0.5, y: 0.5 },   // top-[50%] left-[50%]\n              { x: 0.02, y: 0.10 }, // top-[2%] left-[10%]\n              { x: 0.01, y: 0.85 }, // top-[1%] right-[15%]\n              { x: 0.03, y: 0.50 }, // top-[3%] left-[50%]\n              { x: 0.00, y: 0.30 }, // top-[0%] left-[30%]\n              { x: 0.98, y: 0.10 }, // bottom-[2%] left-[10%]\n              { x: 0.99, y: 0.85 }, // bottom-[1%] right-[15%]\n              { x: 0.97, y: 0.50 }, // bottom-[3%] left-[50%]\n              { x: 1.00, y: 0.30 }, // bottom-[0%] left-[30%]\n              { x: 0.40, y: 0.05 }, // top-[40%] left-[5%]\n              { x: 0.35, y: 0.95 }, // top-[35%] right-[5%]\n            ];\n            const containerWidth = window.innerWidth;\n            const containerHeight = window.innerHeight;\n            const swarmNormX = swarm.x / containerWidth;\n            const swarmNormY = swarm.y / containerHeight;\n            let nearestBlob = bgBlobs[0];\n            let minDist = Infinity;\n            for (const blobPos of bgBlobs) {\n              const dist = Math.hypot(blobPos.x - swarmNormX, blobPos.y - swarmNormY);\n              if (dist < minDist) {\n                minDist = dist;\n                nearestBlob = blobPos;\n              }\n            }\n            // Angle from swarm center to nearest background blob\n            const dx = (nearestBlob.x * containerWidth) - swarm.x;\n            const dy = (nearestBlob.y * containerHeight) - swarm.y;\n            const blobAngle = Math.atan2(dy, dx);\n            // Pick a random angle, then bias it toward blobAngle\n            let randomAngle = Math.random() * Math.PI * 2;\n            // Bias strength depends on distance: closer = stronger bias, farther = weaker bias\n            // Use a smoothstep curve for bias: bias = max(0.15, min(0.5, 0.5 - minDist * 0.4))\n            // (so bias is 0.5 when on top of blob, 0.15 when far away)\n            let bias = 0.5 - Math.min(minDist, 1) * 0.4;\n            bias = Math.max(0.15, Math.min(0.5, bias));\n            let biasedAngle = randomAngle * (1 - bias) + blobAngle * bias;\n            // Normalize angle to [0, 2PI]\n            if (biasedAngle < 0) biasedAngle += Math.PI * 2;\n            if (biasedAngle > Math.PI * 2) biasedAngle -= Math.PI * 2;\n            newAngle = blob.angle;\n            newRadius = blob.radius;\n            // Allow the radius to exceed the max by up to 40% when bias is strong\n            newRadius =\n              BLOB_RADIUS_MIN +\n              Math.random() * (BLOB_RADIUS_MAX - BLOB_RADIUS_MIN) +\n              (BLOB_RADIUS_MAX * 0.4 * (bias - 0.15) / (0.5 - 0.15));\n            return {\n              ...blob,\n              targetAngle: biasedAngle,\n              targetRadius: newRadius,\n              angle: newAngle,\n              radius: newRadius,\n              currentColor: rgbToString(lerpedColor),\n              color: rgbToString(lerpedColor),\n            };\n          }\n          return {\n            ...blob,\n            angle: newAngle,\n            radius: newRadius,\n            currentColor: rgbToString(lerpedColor),\n            color: rgbToString(lerpedColor),\n          };\n        })\n      );\n      if (running) {\n        animationFrameRef.current = requestAnimationFrame(animate);\n      }\n    }\n    animationFrameRef.current = requestAnimationFrame(animate);\n    return () => {\n      running = false;\n      if (animationFrameRef.current) cancelAnimationFrame(animationFrameRef.current);\n    };\n  }, [targetPointerColor, tgX, tgY]);\n\n  // Global mousemove handler for robust tracking\n  useEffect(() => {\n    function handleMouseMove(event: MouseEvent) {\n      if (!containerRef.current) return;\n      const rect = containerRef.current.getBoundingClientRect();\n      const relativeX = event.clientX - rect.left;\n      const relativeY = event.clientY - rect.top;\n      setTgX(relativeX);\n      setTgY(relativeY);\n      // Update debug sample color on mouse move\n      setDebugSample({ x: event.clientX, y: event.clientY });\n      // Update target color only\n      const contrastingColor = selectContrastingColor(relativeX, relativeY);\n      setTargetPointerColor(contrastingColor);\n    }\n    if (interactive) {\n      window.addEventListener('mousemove', handleMouseMove);\n    }\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [interactive]);\n\n  // Register global background color sampling function\n  useEffect(() => {\n    (window as any).__getBackgroundColorAt = getBackgroundColorAt;\n    return () => {\n      if ((window as any).__getBackgroundColorAt === getBackgroundColorAt) {\n        delete (window as any).__getBackgroundColorAt;\n      }\n    };\n  });\n\n  // Expose animated blob positions, sizes, and colors globally for color sampling (for debug tools)\n  useEffect(() => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      (window as any).__backgroundBlobs = blobs.map(blob => {\n        // Calculate blob center in window coordinates\n        const angle = blob.angle ?? 0;\n        const radius = blob.radius ?? 0;\n        const centerX = (swarm.x + Math.cos(angle) * radius) + rect.left;\n        const centerY = (swarm.y + Math.sin(angle) * radius) + rect.top;\n        // Use currentColor or color as RGB string\n        return {\n          x: centerX,\n          y: centerY,\n          radius: (blob.size ?? 0.10) * rect.width * 0.5, // size is fraction of container width, match visual size\n          color: blob.currentColor ?? blob.color ?? '140, 100, 255',\n        };\n      });\n    }\n  }, [blobs, swarm, containerRef]);\n\n  // Remove animation frame update for debug sample; rely on mousemove to update debug dot\n\n  const [isSafari, setIsSafari] = useState(false);\n  useEffect(() => {\n    setIsSafari(/^((?!chrome|android).)*safari/i.test(navigator.userAgent));\n  }, []);\n\n  // Set to false to disable mouse-following blobs\n  const ENABLE_POINTER_BLOBS = false;\n\n  // Helper: normalize a point to [0,1] within the container\n  function normalizeToContainer(x: number, y: number): { normalizedX: number; normalizedY: number } {\n    const rect = containerRef.current?.getBoundingClientRect();\n    if (!rect) return { normalizedX: 0, normalizedY: 0 };\n    let clampedX = x;\n    let clampedY = y;\n    if (clampedX < rect.left) clampedX = rect.left;\n    if (clampedX > rect.right) clampedX = rect.right;\n    if (clampedY < rect.top) clampedY = rect.top;\n    if (clampedY > rect.bottom) clampedY = rect.bottom;\n    return {\n      normalizedX: (clampedX - rect.left) / rect.width,\n      normalizedY: (clampedY - rect.top) / rect.height,\n    };\n  }\n\n  // Helper: convert window (client) coordinates to normalized [0,1] in container\n  function windowToNormalized(x: number, y: number): { normalizedX: number; normalizedY: number } {\n    const rect = containerRef.current?.getBoundingClientRect();\n    if (!rect) return { normalizedX: 0, normalizedY: 0 };\n    return {\n      normalizedX: (x - rect.left) / rect.width,\n      normalizedY: (y - rect.top) / rect.height,\n    };\n  }\n\n  // Helper: convert normalized [0,1] in container to window (client) coordinates\n  function normalizedToWindow(normalizedX: number, normalizedY: number): { x: number; y: number } {\n    const rect = containerRef.current?.getBoundingClientRect();\n    if (!rect) return { x: 0, y: 0 };\n    return {\n      x: rect.left + normalizedX * rect.width,\n      y: rect.top + normalizedY * rect.height,\n    };\n  }\n\n  // Render a red dot at the last sampled coordinate (for debug)\n  const renderDebugSampleDot = () => {\n    if (!debugSample || !containerRef.current) return null;\n    const rect = containerRef.current.getBoundingClientRect();\n    const { normalizedX: debugNormX, normalizedY: debugNormY } = windowToNormalized(debugSample.x, debugSample.y);\n    // Map normalized back to container pixel space\n    const { x: dotX, y: dotY } = normalizedToWindow(debugNormX, debugNormY);\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          left: dotX - 6,\n          top: dotY - 6,\n          width: 12,\n          height: 12,\n          borderRadius: 6,\n          background: \"red\",\n          zIndex: 99999,\n          pointerEvents: \"none\",\n          boxShadow: \"0 0 8px 2px rgba(255,0,0,0.5)\",\n        }}\n      />\n    );\n  };\n\n  return (\n    <BackgroundColorContext.Provider value={{ getBackgroundColorAt }}>\n      <>\n        <div\n          ref={containerRef}\n          className={cn(\n            \"h-full w-full relative overflow-hidden top-0 left-0 bg-[linear-gradient(40deg,var(--gradient-background-start),var(--gradient-background-end))] pointer-events-none\",\n            containerClassName\n          )}\n        >\n          <svg className=\"hidden\">\n            <defs>\n              <filter id=\"blurMe\">\n                <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"10\" result=\"blur\" />\n                <feColorMatrix\n                  in=\"blur\"\n                  mode=\"matrix\"\n                  values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8\"\n                  result=\"goo\"\n                />\n                <feBlend in=\"SourceGraphic\" in2=\"goo\" />\n              </filter>\n            </defs>\n          </svg>\n          <div className={className}>{children}</div>\n          <div\n            className={cn(\n              \"gradients-container h-full w-full blur-lg\",\n              isSafari ? \"blur-2xl\" : \"[filter:url(#blurMe)_blur(40px)]\"\n            )}\n          >\n            {/* Evenly distributed background blobs: corners, edges, center */}\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_var(--first-color)_0,_var(--first-color)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[5%] left-[5%] [transform-origin:top_left] animate-first opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--second-color),_0.8)_0,_rgba(var(--second-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[5%] right-[5%] [transform-origin:top_right] animate-second opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[5%] left-[5%] [transform-origin:bottom_left] animate-third opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[5%] right-[5%] [transform-origin:bottom_right] animate-fourth opacity-70\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.8)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[50%] left-[50%] [transform-origin:center_center] animate-fifth opacity-100\"\n              )}\n            ></div>\n            {/* Additional gradients for better coverage - very top areas */}\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--first-color),_0.8)_0,_rgba(var(--first-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[2%] left-[10%] [transform-origin:top_left] animate-first opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--second-color),_0.8)_0,_rgba(var(--second-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[1%] right-[15%] [transform-origin:top_right] animate-second opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[3%] left-[50%] [transform-origin:top_center] animate-third opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[0%] left-[30%] [transform-origin:top_left] animate-fourth opacity-100\"\n              )}\n            ></div>\n            {/* Additional gradients for better coverage - very bottom areas */}\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--third-color),_0.8)_0,_rgba(var(--third-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[2%] left-[10%] [transform-origin:bottom_left] animate-third opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fourth-color),_0.8)_0,_rgba(var(--fourth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[1%] right-[15%] [transform-origin:bottom_right] animate-fourth opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.8)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[3%] left-[50%] [transform-origin:bottom_center] animate-fifth opacity-100\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--first-color),_0.8)_0,_rgba(var(--first-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] bottom-[0%] left-[30%] [transform-origin:bottom_left] animate-first opacity-100\"\n              )}\n            ></div>\n            {/* Additional gradients for better coverage - middle areas */}\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--fifth-color),_0.5)_0,_rgba(var(--fifth-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[40%] left-[5%] [transform-origin:left_center] animate-fifth opacity-70\"\n              )}\n            ></div>\n            <div\n              className={cn(\n                \"absolute [background:radial-gradient(circle_at_center,_rgba(var(--first-color),_0.5)_0,_rgba(var(--first-color),_0)_50%)_no-repeat] [mix-blend-mode:var(--blending-value)] w-[var(--size)] h-[var(--size)] top-[35%] right-[5%] [transform-origin:right_center] animate-first opacity-70\"\n              )}\n            ></div>\n            {ENABLE_POINTER_BLOBS && interactive && (\n              <>\n                {blobs.map((blob) => {\n                  // Calculate offset from swarm center using polar coordinates\n                  const offsetX = Math.cos(blob.angle) * blob.radius;\n                  const offsetY = Math.sin(blob.angle) * blob.radius;\n                  return (\n                    <div\n                      key={blob.id}\n                      style={{\n                        background: `radial-gradient(circle at center, rgba(${blob.currentColor}, 0.6) 0%, rgba(${blob.currentColor}, 0.4) 30%, rgba(${blob.currentColor}, 0) 100%)`,\n                        mixBlendMode: 'normal',\n                        position: 'absolute',\n                        width: `${blob.size * 100}%`,\n                        height: `${blob.size * 100}%`,\n                        top: `calc(${swarm.y + offsetY}px - ${blob.size * 50}%)`,\n                        left: `calc(${swarm.x + offsetX}px - ${blob.size * 50}%)`,\n                        opacity: 0.8,\n                        pointerEvents: 'none',\n                        transition: 'none',\n                        filter: 'blur(48px)',\n                      }}\n                    />\n                  );\n                })}\n              </>\n            )}\n          </div>\n        </div>\n        {renderDebugSampleDot()}\n      </>\n    </BackgroundColorContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}