{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Portfolio\\\\src\\\\ui\\\\ProceduralArt.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function stableStringify(input) {\n  const seen = new WeakSet();\n  function normalize(value) {\n    if (value && typeof value === 'object') {\n      if (seen.has(value)) return null;\n      seen.add(value);\n      if (Array.isArray(value)) return value.map(normalize);\n      const out = {};\n      for (const key of Object.keys(value).sort()) out[key] = normalize(value[key]);\n      return out;\n    }\n    return value;\n  }\n  return JSON.stringify(normalize(input));\n}\nexport function hashString(str) {\n  let h = 2166136261;\n  for (let i = 0; i < str.length; i++) {\n    h ^= str.charCodeAt(i);\n    h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);\n  }\n  return h >>> 0;\n}\nexport function seededRandom(seed) {\n  let s = seed >>> 0;\n  return () => {\n    s ^= s << 13;\n    s ^= s >>> 17;\n    s ^= s << 5;\n    return (s >>> 0) % 10000 / 10000;\n  };\n}\nconst DEFAULT_LIGHT = ['hsl(221, 83%, 53%)',\n// blue-600\n'hsl(259, 94%, 61%)',\n// violet-500\n'hsl(280, 83%, 60%)',\n// purple\n'hsl(199, 89%, 48%)',\n// sky-500\n'hsl(173, 80%, 40%)',\n// teal-600\n'hsl(14, 90%, 57%)',\n// orange-500\n'hsl(340, 82%, 52%)',\n// rose-500\n'hsl(234, 14%, 35%)' // slate-600\n];\nconst DEFAULT_DARK = ['hsl(221, 83%, 66%)',\n// blue-400\n'hsl(259, 94%, 70%)',\n// violet-400\n'hsl(280, 83%, 72%)',\n// purple-400\n'hsl(199, 95%, 72%)',\n// sky-400\n'hsl(173, 80%, 65%)',\n// teal-400\n'hsl(14, 90%, 68%)',\n// orange-400\n'hsl(340, 82%, 68%)',\n// rose-400\n'hsl(234, 14%, 70%)' // slate-300\n];\nexport function generateProceduralImage(seedInput, opts = {}) {\n  var _opts$width, _opts$height, _opts$isDark, _opts$darkPalette, _opts$lightPalette, _opts$density, _opts$mirrorBias;\n  const width = Math.max(16, Math.floor((_opts$width = opts.width) !== null && _opts$width !== void 0 ? _opts$width : 800));\n  const height = Math.max(16, Math.floor((_opts$height = opts.height) !== null && _opts$height !== void 0 ? _opts$height : 480));\n  const isDark = (_opts$isDark = opts.isDark) !== null && _opts$isDark !== void 0 ? _opts$isDark : typeof document !== 'undefined' && document.documentElement.classList.contains('dark');\n  const palette = (isDark ? (_opts$darkPalette = opts.darkPalette) !== null && _opts$darkPalette !== void 0 ? _opts$darkPalette : DEFAULT_DARK : (_opts$lightPalette = opts.lightPalette) !== null && _opts$lightPalette !== void 0 ? _opts$lightPalette : DEFAULT_LIGHT).slice();\n  const seed = hashString(seedInput);\n  const rand = seededRandom(seed);\n  const idx1 = Math.floor(rand() * palette.length);\n  const idx2 = (idx1 + 2 + Math.floor(rand() * (palette.length - 1))) % palette.length;\n  const grad1 = palette[idx1];\n  const grad2 = palette[idx2];\n  const bg = isDark ? 'hsl(222, 47%, 11%)' : 'hsl(210, 20%, 96%)';\n  const density = Math.max(0.25, Math.min(2, (_opts$density = opts.density) !== null && _opts$density !== void 0 ? _opts$density : 1));\n  const qWidth = Math.floor(width / 2);\n  const qHeight = Math.floor(height / 2);\n\n  // choose mirror mode\n  const r = rand();\n  let mirrorMode = 1;\n  const bias = (_opts$mirrorBias = opts.mirrorBias) !== null && _opts$mirrorBias !== void 0 ? _opts$mirrorBias : 1;\n  if (bias === 0) mirrorMode = r < 0.7 ? 0 : r < 0.95 ? 1 : 2;else if (bias === 1) mirrorMode = r < 0.6 ? 1 : r < 0.95 ? 0 : 2;else mirrorMode = r < 0.5 ? 1 : r < 0.85 ? 2 : 0;\n\n  // circles\n  const circles = [];\n  const circleCount = Math.max(1, Math.round((3 + Math.floor(rand() * 3)) * density));\n  for (let i = 0; i < circleCount; i++) {\n    const cx = Math.floor(rand() * qWidth);\n    const cy = Math.floor(rand() * qHeight);\n    const r0 = Math.floor((30 + rand() * 80) * (0.9 + rand() * 0.2));\n    const colorIdx = Math.floor(rand() * palette.length);\n    const fill = palette[(idx1 + colorIdx) % palette.length];\n    const opacity = (isDark ? 0.22 : 0.18) + rand() * (isDark ? 0.26 : 0.22);\n    circles.push(`<circle cx=\"${cx}\" cy=\"${cy}\" r=\"${r0}\" fill=\"${fill}\" opacity=\"${opacity.toFixed(2)}\" />`);\n  }\n\n  // rings\n  const rings = [];\n  const ringCount = Math.max(1, Math.round((2 + Math.floor(rand() * 2)) * density));\n  for (let i = 0; i < ringCount; i++) {\n    const cx = Math.floor(rand() * qWidth);\n    const cy = Math.floor(rand() * qHeight);\n    const rr = Math.floor(50 + rand() * 120);\n    const colorIdx = Math.floor(rand() * palette.length);\n    const stroke = palette[(idx2 + colorIdx) % palette.length];\n    const strokeOpacity = (isDark ? 0.22 : 0.16) + rand() * 0.14;\n    const strokeWidth = 3 + Math.floor(rand() * 2);\n    rings.push(`<circle cx=\"${cx}\" cy=\"${cy}\" r=\"${rr}\" fill=\"none\" stroke=\"${stroke}\" stroke-opacity=\"${strokeOpacity.toFixed(2)}\" stroke-width=\"${strokeWidth}\" />`);\n  }\n\n  // rects\n  const rects = [];\n  const rectCount = Math.max(1, Math.round((2 + Math.floor(rand() * 3)) * density));\n  for (let i = 0; i < rectCount; i++) {\n    const w = Math.floor(60 + rand() * 120);\n    const h = Math.floor(30 + rand() * 80);\n    const x = Math.floor(rand() * Math.max(1, qWidth - w));\n    const y = Math.floor(rand() * Math.max(1, qHeight - h));\n    const rx = 10 + Math.floor(rand() * 24);\n    const angle = Math.floor(rand() * 360);\n    const colorIdx = Math.floor(rand() * palette.length);\n    const fill = palette[(idx1 + colorIdx * 2) % palette.length];\n    const opacity = (isDark ? 0.16 : 0.12) + rand() * 0.10;\n    rects.push(`<g transform=\"rotate(${angle} ${x + w / 2} ${y + h / 2})\"><rect x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\" rx=\"${rx}\" ry=\"${rx}\" fill=\"${fill}\" opacity=\"${opacity.toFixed(2)}\" /></g>`);\n  }\n\n  // triangles\n  const tris = [];\n  const triCount = Math.max(1, Math.round((1 + Math.floor(rand() * 2)) * density));\n  for (let i = 0; i < triCount; i++) {\n    const x1 = Math.floor(rand() * qWidth),\n      y1 = Math.floor(rand() * qHeight);\n    const x2 = Math.floor(rand() * qWidth),\n      y2 = Math.floor(rand() * qHeight);\n    const x3 = Math.floor(rand() * qWidth),\n      y3 = Math.floor(rand() * qHeight);\n    const colorIdx = Math.floor(rand() * palette.length);\n    const fill = palette[(idx2 + colorIdx * 3) % palette.length];\n    const opacity = (isDark ? 0.16 : 0.12) + rand() * 0.08;\n    tris.push(`<polygon points=\"${x1},${y1} ${x2},${y2} ${x3},${y3}\" fill=\"${fill}\" opacity=\"${opacity.toFixed(2)}\" />`);\n  }\n\n  // stripes overlay\n  const stripes = [];\n  const stripeCount = 12;\n  for (let i = 0; i < stripeCount; i++) {\n    const y = Math.floor(i / stripeCount * height);\n    const alpha = (isDark ? 0.06 : 0.04) + (i % 2 === 0 ? isDark ? 0.02 : 0.015 : 0);\n    const stripeColor = isDark ? 'white' : 'black';\n    stripes.push(`<rect x=\"0\" y=\"${y}\" width=\"${width}\" height=\"${Math.ceil(height / stripeCount)}\" fill=\"${stripeColor}\" opacity=\"${alpha.toFixed(2)}\" />`);\n  }\n  const baseGroup = [`<g filter=\\\"url(#blurSoft)\\\">${circles.join('\\\\n')}</g>`, `<g>${rings.join('\\\\n')}</g>`, `<g filter=\\\"url(#blurMid)\\\">${rects.join('\\\\n')}</g>`, `<g>${tris.join('\\\\n')}</g>`].join('');\n  const mirrors = [];\n  mirrors.push(baseGroup);\n  mirrors.push(`<g transform=\\\"translate(${width},0) scale(-1,1)\\\">${baseGroup}</g>`);\n  mirrors.push(`<g transform=\\\"translate(0,${height}) scale(1,-1)\\\">${baseGroup}</g>`);\n  mirrors.push(`<g transform=\\\"translate(${width},${height}) scale(-1,-1)\\\">${baseGroup}</g>`);\n  if (mirrorMode >= 2) {\n    const steps = 3;\n    for (let i = 0; i < steps; i++) {\n      const angle = 360 / steps * i + Math.floor(rand() * 15);\n      mirrors.push(`<g transform=\\\"translate(${width / 2},${height / 2}) rotate(${angle}) translate(${-width / 2},${-height / 2})\\\">${baseGroup}</g>`);\n    }\n  }\n  const svg = `<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"${width}\\\" height=\\\"${height}\\\" viewBox=\\\"0 0 ${width} ${height}\\\">\\n    <defs>\\n      <linearGradient id=\\\"g1\\\" x1=\\\"0\\\" y1=\\\"0\\\" x2=\\\"1\\\" y2=\\\"1\\\">\\n        <stop offset=\\\"0%\\\" stop-color=\\\"${grad1}\\\" />\\n        <stop offset=\\\"100%\\\" stop-color=\\\"${grad2}\\\" />\\n      </linearGradient>\\n      <filter id=\\\"blurSoft\\\"><feGaussianBlur stdDeviation=\\\"6\\\" /></filter>\\n      <filter id=\\\"blurMid\\\"><feGaussianBlur stdDeviation=\\\"8\\\" /></filter>\\n    </defs>\\n    <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"${bg}\\\" />\\n    <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"url(#g1)\\\" opacity=\\\"${isDark ? '0.55' : '0.65'}\\\" />\\n    ${mirrors.join('')}\\n    <g opacity=\\\"0.35\\\">${stripes.join('\\\\n')}</g>\\n  </svg>`;\n  return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;\n}\nexport const ProceduralArtImage = ({\n  data,\n  width = 800,\n  height = 480,\n  options,\n  alt = 'procedural-art',\n  className,\n  style\n}) => {\n  const seed = typeof data === 'string' ? data : stableStringify(data);\n  const src = generateProceduralImage(seed, {\n    width,\n    height,\n    ...options\n  });\n  return /*#__PURE__*/_jsxDEV(\"img\", {\n    src: src,\n    width: width,\n    height: height,\n    alt: alt,\n    className: className,\n    style: style\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 10\n  }, this);\n};\n_c = ProceduralArtImage;\nexport default ProceduralArtImage;\nvar _c;\n$RefreshReg$(_c, \"ProceduralArtImage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","stableStringify","input","seen","WeakSet","normalize","value","has","add","Array","isArray","map","out","key","Object","keys","sort","JSON","stringify","hashString","str","h","i","length","charCodeAt","seededRandom","seed","s","DEFAULT_LIGHT","DEFAULT_DARK","generateProceduralImage","seedInput","opts","_opts$width","_opts$height","_opts$isDark","_opts$darkPalette","_opts$lightPalette","_opts$density","_opts$mirrorBias","width","Math","max","floor","height","isDark","document","documentElement","classList","contains","palette","darkPalette","lightPalette","slice","rand","idx1","idx2","grad1","grad2","bg","density","min","qWidth","qHeight","r","mirrorMode","bias","mirrorBias","circles","circleCount","round","cx","cy","r0","colorIdx","fill","opacity","push","toFixed","rings","ringCount","rr","stroke","strokeOpacity","strokeWidth","rects","rectCount","w","x","y","rx","angle","tris","triCount","x1","y1","x2","y2","x3","y3","stripes","stripeCount","alpha","stripeColor","ceil","baseGroup","join","mirrors","steps","svg","encodeURIComponent","ProceduralArtImage","data","options","alt","className","style","src","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Portfolio/src/ui/ProceduralArt.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport type ProceduralOptions = {\r\n  width?: number;\r\n  height?: number;\r\n  isDark?: boolean; // override theme detection\r\n  lightPalette?: string[];\r\n  darkPalette?: string[];\r\n  // 0: mostly 2-way, 1: mostly 4-way, 2: occasionally 8-way (kaleidoscope)\r\n  mirrorBias?: 0 | 1 | 2;\r\n  // density scalar (0.5 = fewer shapes, 1 = default, 1.5 = more)\r\n  density?: number;\r\n};\r\n\r\nexport function stableStringify(input: any): string {\r\n  const seen = new WeakSet();\r\n  function normalize(value: any): any {\r\n    if (value && typeof value === 'object') {\r\n      if (seen.has(value)) return null;\r\n      seen.add(value);\r\n      if (Array.isArray(value)) return value.map(normalize);\r\n      const out: Record<string, any> = {};\r\n      for (const key of Object.keys(value).sort()) out[key] = normalize(value[key]);\r\n      return out;\r\n    }\r\n    return value;\r\n  }\r\n  return JSON.stringify(normalize(input));\r\n}\r\n\r\nexport function hashString(str: string): number {\r\n  let h = 2166136261;\r\n  for (let i = 0; i < str.length; i++) {\r\n    h ^= str.charCodeAt(i);\r\n    h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);\r\n  }\r\n  return h >>> 0;\r\n}\r\n\r\nexport function seededRandom(seed: number) {\r\n  let s = seed >>> 0;\r\n  return () => {\r\n    s ^= s << 13; s ^= s >>> 17; s ^= s << 5;\r\n    return ((s >>> 0) % 10000) / 10000;\r\n  };\r\n}\r\n\r\nconst DEFAULT_LIGHT = [\r\n  'hsl(221, 83%, 53%)', // blue-600\r\n  'hsl(259, 94%, 61%)', // violet-500\r\n  'hsl(280, 83%, 60%)', // purple\r\n  'hsl(199, 89%, 48%)', // sky-500\r\n  'hsl(173, 80%, 40%)', // teal-600\r\n  'hsl(14, 90%, 57%)',  // orange-500\r\n  'hsl(340, 82%, 52%)', // rose-500\r\n  'hsl(234, 14%, 35%)', // slate-600\r\n];\r\nconst DEFAULT_DARK = [\r\n  'hsl(221, 83%, 66%)', // blue-400\r\n  'hsl(259, 94%, 70%)', // violet-400\r\n  'hsl(280, 83%, 72%)', // purple-400\r\n  'hsl(199, 95%, 72%)', // sky-400\r\n  'hsl(173, 80%, 65%)', // teal-400\r\n  'hsl(14, 90%, 68%)',  // orange-400\r\n  'hsl(340, 82%, 68%)', // rose-400\r\n  'hsl(234, 14%, 70%)', // slate-300\r\n];\r\n\r\nexport function generateProceduralImage(seedInput: string, opts: ProceduralOptions = {}): string {\r\n  const width = Math.max(16, Math.floor(opts.width ?? 800));\r\n  const height = Math.max(16, Math.floor(opts.height ?? 480));\r\n  const isDark = opts.isDark ?? (typeof document !== 'undefined' && document.documentElement.classList.contains('dark'));\r\n  const palette = (isDark ? (opts.darkPalette ?? DEFAULT_DARK) : (opts.lightPalette ?? DEFAULT_LIGHT)).slice();\r\n\r\n  const seed = hashString(seedInput);\r\n  const rand = seededRandom(seed);\r\n  const idx1 = Math.floor(rand() * palette.length);\r\n  const idx2 = (idx1 + 2 + Math.floor(rand() * (palette.length - 1))) % palette.length;\r\n  const grad1 = palette[idx1];\r\n  const grad2 = palette[idx2];\r\n  const bg = isDark ? 'hsl(222, 47%, 11%)' : 'hsl(210, 20%, 96%)';\r\n\r\n  const density = Math.max(0.25, Math.min(2, opts.density ?? 1));\r\n  const qWidth = Math.floor(width / 2);\r\n  const qHeight = Math.floor(height / 2);\r\n\r\n  // choose mirror mode\r\n  const r = rand();\r\n  let mirrorMode: 0 | 1 | 2 = 1;\r\n  const bias = opts.mirrorBias ?? 1;\r\n  if (bias === 0) mirrorMode = r < 0.7 ? 0 : r < 0.95 ? 1 : 2;\r\n  else if (bias === 1) mirrorMode = r < 0.6 ? 1 : r < 0.95 ? 0 : 2;\r\n  else mirrorMode = r < 0.5 ? 1 : r < 0.85 ? 2 : 0;\r\n\r\n  // circles\r\n  const circles: string[] = [];\r\n  const circleCount = Math.max(1, Math.round((3 + Math.floor(rand() * 3)) * density));\r\n  for (let i = 0; i < circleCount; i++) {\r\n    const cx = Math.floor(rand() * qWidth);\r\n    const cy = Math.floor(rand() * qHeight);\r\n    const r0 = Math.floor((30 + rand() * 80) * (0.9 + rand() * 0.2));\r\n    const colorIdx = Math.floor(rand() * palette.length);\r\n    const fill = palette[(idx1 + colorIdx) % palette.length];\r\n    const opacity = (isDark ? 0.22 : 0.18) + rand() * (isDark ? 0.26 : 0.22);\r\n    circles.push(`<circle cx=\"${cx}\" cy=\"${cy}\" r=\"${r0}\" fill=\"${fill}\" opacity=\"${opacity.toFixed(2)}\" />`);\r\n  }\r\n\r\n  // rings\r\n  const rings: string[] = [];\r\n  const ringCount = Math.max(1, Math.round((2 + Math.floor(rand() * 2)) * density));\r\n  for (let i = 0; i < ringCount; i++) {\r\n    const cx = Math.floor(rand() * qWidth);\r\n    const cy = Math.floor(rand() * qHeight);\r\n    const rr = Math.floor(50 + rand() * 120);\r\n    const colorIdx = Math.floor(rand() * palette.length);\r\n    const stroke = palette[(idx2 + colorIdx) % palette.length];\r\n    const strokeOpacity = (isDark ? 0.22 : 0.16) + rand() * 0.14;\r\n    const strokeWidth = 3 + Math.floor(rand() * 2);\r\n    rings.push(`<circle cx=\"${cx}\" cy=\"${cy}\" r=\"${rr}\" fill=\"none\" stroke=\"${stroke}\" stroke-opacity=\"${strokeOpacity.toFixed(2)}\" stroke-width=\"${strokeWidth}\" />`);\r\n  }\r\n\r\n  // rects\r\n  const rects: string[] = [];\r\n  const rectCount = Math.max(1, Math.round((2 + Math.floor(rand() * 3)) * density));\r\n  for (let i = 0; i < rectCount; i++) {\r\n    const w = Math.floor(60 + rand() * 120);\r\n    const h = Math.floor(30 + rand() * 80);\r\n    const x = Math.floor(rand() * Math.max(1, qWidth - w));\r\n    const y = Math.floor(rand() * Math.max(1, qHeight - h));\r\n    const rx = 10 + Math.floor(rand() * 24);\r\n    const angle = Math.floor(rand() * 360);\r\n    const colorIdx = Math.floor(rand() * palette.length);\r\n    const fill = palette[(idx1 + colorIdx * 2) % palette.length];\r\n    const opacity = (isDark ? 0.16 : 0.12) + rand() * 0.10;\r\n    rects.push(`<g transform=\"rotate(${angle} ${x + w / 2} ${y + h / 2})\"><rect x=\"${x}\" y=\"${y}\" width=\"${w}\" height=\"${h}\" rx=\"${rx}\" ry=\"${rx}\" fill=\"${fill}\" opacity=\"${opacity.toFixed(2)}\" /></g>`);\r\n  }\r\n\r\n  // triangles\r\n  const tris: string[] = [];\r\n  const triCount = Math.max(1, Math.round((1 + Math.floor(rand() * 2)) * density));\r\n  for (let i = 0; i < triCount; i++) {\r\n    const x1 = Math.floor(rand() * qWidth), y1 = Math.floor(rand() * qHeight);\r\n    const x2 = Math.floor(rand() * qWidth), y2 = Math.floor(rand() * qHeight);\r\n    const x3 = Math.floor(rand() * qWidth), y3 = Math.floor(rand() * qHeight);\r\n    const colorIdx = Math.floor(rand() * palette.length);\r\n    const fill = palette[(idx2 + colorIdx * 3) % palette.length];\r\n    const opacity = (isDark ? 0.16 : 0.12) + rand() * 0.08;\r\n    tris.push(`<polygon points=\"${x1},${y1} ${x2},${y2} ${x3},${y3}\" fill=\"${fill}\" opacity=\"${opacity.toFixed(2)}\" />`);\r\n  }\r\n\r\n  // stripes overlay\r\n  const stripes: string[] = [];\r\n  const stripeCount = 12;\r\n  for (let i = 0; i < stripeCount; i++) {\r\n    const y = Math.floor((i / stripeCount) * height);\r\n    const alpha = (isDark ? 0.06 : 0.04) + (i % 2 === 0 ? (isDark ? 0.02 : 0.015) : 0);\r\n    const stripeColor = isDark ? 'white' : 'black';\r\n    stripes.push(`<rect x=\"0\" y=\"${y}\" width=\"${width}\" height=\"${Math.ceil(height / stripeCount)}\" fill=\"${stripeColor}\" opacity=\"${alpha.toFixed(2)}\" />`);\r\n  }\r\n\r\n  const baseGroup = [\r\n    `<g filter=\\\"url(#blurSoft)\\\">${circles.join('\\\\n')}</g>`,\r\n    `<g>${rings.join('\\\\n')}</g>`,\r\n    `<g filter=\\\"url(#blurMid)\\\">${rects.join('\\\\n')}</g>`,\r\n    `<g>${tris.join('\\\\n')}</g>`\r\n  ].join('');\r\n\r\n  const mirrors: string[] = [];\r\n  mirrors.push(baseGroup);\r\n  mirrors.push(`<g transform=\\\"translate(${width},0) scale(-1,1)\\\">${baseGroup}</g>`);\r\n  mirrors.push(`<g transform=\\\"translate(0,${height}) scale(1,-1)\\\">${baseGroup}</g>`);\r\n  mirrors.push(`<g transform=\\\"translate(${width},${height}) scale(-1,-1)\\\">${baseGroup}</g>`);\r\n  if (mirrorMode >= 2) {\r\n    const steps = 3;\r\n    for (let i = 0; i < steps; i++) {\r\n      const angle = (360 / steps) * i + Math.floor(rand() * 15);\r\n      mirrors.push(`<g transform=\\\"translate(${width / 2},${height / 2}) rotate(${angle}) translate(${-width / 2},${-height / 2})\\\">${baseGroup}</g>`);\r\n    }\r\n  }\r\n\r\n  const svg = `<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\r\n  <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"${width}\\\" height=\\\"${height}\\\" viewBox=\\\"0 0 ${width} ${height}\\\">\\n    <defs>\\n      <linearGradient id=\\\"g1\\\" x1=\\\"0\\\" y1=\\\"0\\\" x2=\\\"1\\\" y2=\\\"1\\\">\\n        <stop offset=\\\"0%\\\" stop-color=\\\"${grad1}\\\" />\\n        <stop offset=\\\"100%\\\" stop-color=\\\"${grad2}\\\" />\\n      </linearGradient>\\n      <filter id=\\\"blurSoft\\\"><feGaussianBlur stdDeviation=\\\"6\\\" /></filter>\\n      <filter id=\\\"blurMid\\\"><feGaussianBlur stdDeviation=\\\"8\\\" /></filter>\\n    </defs>\\n    <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"${bg}\\\" />\\n    <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"url(#g1)\\\" opacity=\\\"${isDark ? '0.55' : '0.65'}\\\" />\\n    ${mirrors.join('')}\\n    <g opacity=\\\"0.35\\\">${stripes.join('\\\\n')}</g>\\n  </svg>`;\r\n  return `data:image/svg+xml;utf8,${encodeURIComponent(svg)}`;\r\n}\r\n\r\nexport type ProceduralArtImageProps = {\r\n  data: unknown | string;\r\n  width?: number;\r\n  height?: number;\r\n  options?: ProceduralOptions;\r\n  alt?: string;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nexport const ProceduralArtImage: React.FC<ProceduralArtImageProps> = ({ data, width = 800, height = 480, options, alt = 'procedural-art', className, style }) => {\r\n  const seed = typeof data === 'string' ? data : stableStringify(data);\r\n  const src = generateProceduralImage(seed, { width, height, ...options });\r\n  return <img src={src} width={width} height={height} alt={alt} className={className} style={style} />;\r\n};\r\n\r\nexport default ProceduralArtImage;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}