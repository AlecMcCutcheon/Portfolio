{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\Portfolio\\\\src\\\\ui\\\\BlurText.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction buildKeyframes(from, steps) {\n  const keys = new Set([...Object.keys(from), ...steps.flatMap(s => Object.keys(s))]);\n  const keyframes = {};\n  keys.forEach(k => {\n    keyframes[k] = [from[k], ...steps.map(s => s[k])];\n  });\n  return keyframes;\n}\nconst BlurText = ({\n  text = '',\n  delay = 200,\n  className = '',\n  animateBy = 'words',\n  direction = 'top',\n  threshold = 0.1,\n  rootMargin = '0px',\n  animationFrom,\n  animationTo,\n  easing = t => t,\n  onAnimationComplete,\n  stepDuration = 0.35\n}) => {\n  _s();\n  const elements = animateBy === 'words' ? text.split(' ') : text.split('');\n  const [inView, setInView] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    if (!ref.current) return;\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        setInView(true);\n        observer.unobserve(ref.current);\n      }\n    }, {\n      threshold,\n      rootMargin\n    });\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, [threshold, rootMargin]);\n  const defaultFrom = useMemo(() => direction === 'top' ? {\n    filter: 'blur(10px)',\n    opacity: 0,\n    y: -50\n  } : {\n    filter: 'blur(10px)',\n    opacity: 0,\n    y: 50\n  }, [direction]);\n  const defaultTo = useMemo(() => [{\n    filter: 'blur(5px)',\n    opacity: 0.5,\n    y: direction === 'top' ? 5 : -5\n  }, {\n    filter: 'blur(0px)',\n    opacity: 1,\n    y: 0\n  }], [direction]);\n  const fromSnapshot = animationFrom !== null && animationFrom !== void 0 ? animationFrom : defaultFrom;\n  const toSnapshots = animationTo !== null && animationTo !== void 0 ? animationTo : defaultTo;\n  const stepCount = toSnapshots.length + 1;\n  const totalDuration = stepDuration * (stepCount - 1);\n  const times = Array.from({\n    length: stepCount\n  }, (_, i) => stepCount === 1 ? 0 : i / (stepCount - 1));\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    ref: ref,\n    className: `blur-text ${className} flex flex-wrap`,\n    children: elements.map((segment, index) => {\n      const animateKeyframes = buildKeyframes(fromSnapshot, toSnapshots);\n      const spanTransition = {\n        duration: totalDuration,\n        times,\n        delay: index * delay / 1000,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ease: easing\n      };\n      return /*#__PURE__*/_jsxDEV(motion.span, {\n        initial: fromSnapshot,\n        animate: inView ? animateKeyframes : fromSnapshot,\n        transition: spanTransition,\n        onAnimationComplete: index === elements.length - 1 ? onAnimationComplete : undefined,\n        style: {\n          display: 'inline-block',\n          willChange: 'transform, filter, opacity'\n        },\n        children: [segment === ' ' ? '\\u00A0' : segment, animateBy === 'words' && index < elements.length - 1 && '\\u00A0']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(BlurText, \"IxnOfDOifNR2DM+0TATKkPR86iM=\");\n_c = BlurText;\nexport default BlurText;\nvar _c;\n$RefreshReg$(_c, \"BlurText\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","motion","jsxDEV","_jsxDEV","buildKeyframes","from","steps","keys","Set","Object","flatMap","s","keyframes","forEach","k","map","BlurText","text","delay","className","animateBy","direction","threshold","rootMargin","animationFrom","animationTo","easing","t","onAnimationComplete","stepDuration","_s","elements","split","inView","setInView","ref","current","observer","IntersectionObserver","entry","isIntersecting","unobserve","observe","disconnect","defaultFrom","filter","opacity","y","defaultTo","fromSnapshot","toSnapshots","stepCount","length","totalDuration","times","Array","_","i","children","segment","index","animateKeyframes","spanTransition","duration","ease","span","initial","animate","transition","undefined","style","display","willChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/Portfolio/src/ui/BlurText.tsx"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport type { Transition } from 'framer-motion';\r\n\r\ntype Easing = ((t: number) => number) | string | number[] | Array<((t: number) => number) | string | number[]>;\r\n\r\nexport interface BlurTextProps {\r\n  text?: string;\r\n  delay?: number;\r\n  className?: string;\r\n  animateBy?: 'words' | 'letters';\r\n  direction?: 'top' | 'bottom';\r\n  threshold?: number;\r\n  rootMargin?: string;\r\n  animationFrom?: Record<string, string | number>;\r\n  animationTo?: Array<Record<string, string | number>>;\r\n  easing?: Easing;\r\n  onAnimationComplete?: () => void;\r\n  stepDuration?: number;\r\n}\r\n\r\nfunction buildKeyframes(\r\n  from: Record<string, string | number>,\r\n  steps: Array<Record<string, string | number>>\r\n): Record<string, Array<string | number>> {\r\n  const keys = new Set<string>([...Object.keys(from), ...steps.flatMap((s) => Object.keys(s))]);\r\n  const keyframes: Record<string, Array<string | number>> = {};\r\n  keys.forEach((k) => {\r\n    keyframes[k] = [from[k], ...steps.map((s) => s[k])];\r\n  });\r\n  return keyframes;\r\n}\r\n\r\nconst BlurText: React.FC<BlurTextProps> = ({\r\n  text = '',\r\n  delay = 200,\r\n  className = '',\r\n  animateBy = 'words',\r\n  direction = 'top',\r\n  threshold = 0.1,\r\n  rootMargin = '0px',\r\n  animationFrom,\r\n  animationTo,\r\n  easing = (t: number) => t,\r\n  onAnimationComplete,\r\n  stepDuration = 0.35,\r\n}) => {\r\n  const elements = animateBy === 'words' ? text.split(' ') : text.split('');\r\n  const [inView, setInView] = useState(false);\r\n  const ref = useRef<HTMLParagraphElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) return;\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setInView(true);\r\n          observer.unobserve(ref.current as Element);\r\n        }\r\n      },\r\n      { threshold, rootMargin }\r\n    );\r\n    observer.observe(ref.current);\r\n    return () => observer.disconnect();\r\n  }, [threshold, rootMargin]);\r\n\r\n  const defaultFrom = useMemo(\r\n    () =>\r\n      direction === 'top'\r\n        ? { filter: 'blur(10px)', opacity: 0, y: -50 }\r\n        : { filter: 'blur(10px)', opacity: 0, y: 50 },\r\n    [direction]\r\n  );\r\n\r\n  const defaultTo = useMemo(\r\n    () => [\r\n      {\r\n        filter: 'blur(5px)',\r\n        opacity: 0.5,\r\n        y: direction === 'top' ? 5 : -5,\r\n      },\r\n      { filter: 'blur(0px)', opacity: 1, y: 0 },\r\n    ],\r\n    [direction]\r\n  );\r\n\r\n  const fromSnapshot = animationFrom ?? defaultFrom;\r\n  const toSnapshots = animationTo ?? defaultTo;\r\n\r\n  const stepCount = toSnapshots.length + 1;\r\n  const totalDuration = stepDuration * (stepCount - 1);\r\n  const times = Array.from({ length: stepCount }, (_, i) => (stepCount === 1 ? 0 : i / (stepCount - 1)));\r\n\r\n  return (\r\n    <p ref={ref} className={`blur-text ${className} flex flex-wrap`}>\r\n      {elements.map((segment, index) => {\r\n        const animateKeyframes = buildKeyframes(fromSnapshot, toSnapshots);\r\n\r\n        const spanTransition: Transition = {\r\n          duration: totalDuration,\r\n          times,\r\n          delay: (index * delay) / 1000,\r\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n          ease: easing as any,\r\n        };\r\n\r\n        return (\r\n          <motion.span\r\n            key={index}\r\n            initial={fromSnapshot}\r\n            animate={inView ? animateKeyframes : fromSnapshot}\r\n            transition={spanTransition}\r\n            onAnimationComplete={index === elements.length - 1 ? onAnimationComplete : undefined}\r\n            style={{ display: 'inline-block', willChange: 'transform, filter, opacity' }}\r\n          >\r\n            {segment === ' ' ? '\\u00A0' : segment}\r\n            {animateBy === 'words' && index < elements.length - 1 && '\\u00A0'}\r\n          </motion.span>\r\n        );\r\n      })}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default BlurText;\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}